// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChannelTransactionPurposePaidMedia represents TL type `channelTransactionPurposePaidMedia#b00b2258`.
type ChannelTransactionPurposePaidMedia struct {
	// Identifier of the corresponding message with paid media; can be an identifier of a
	// deleted message
	MessageID int64
	// The bought media if the trancastion wasn't refunded
	Media []PaidMediaClass
}

// ChannelTransactionPurposePaidMediaTypeID is TL type id of ChannelTransactionPurposePaidMedia.
const ChannelTransactionPurposePaidMediaTypeID = 0xb00b2258

// construct implements constructor of ChannelTransactionPurposeClass.
func (c ChannelTransactionPurposePaidMedia) construct() ChannelTransactionPurposeClass { return &c }

// Ensuring interfaces in compile-time for ChannelTransactionPurposePaidMedia.
var (
	_ bin.Encoder     = &ChannelTransactionPurposePaidMedia{}
	_ bin.Decoder     = &ChannelTransactionPurposePaidMedia{}
	_ bin.BareEncoder = &ChannelTransactionPurposePaidMedia{}
	_ bin.BareDecoder = &ChannelTransactionPurposePaidMedia{}

	_ ChannelTransactionPurposeClass = &ChannelTransactionPurposePaidMedia{}
)

func (c *ChannelTransactionPurposePaidMedia) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.MessageID == 0) {
		return false
	}
	if !(c.Media == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelTransactionPurposePaidMedia) String() string {
	if c == nil {
		return "ChannelTransactionPurposePaidMedia(nil)"
	}
	type Alias ChannelTransactionPurposePaidMedia
	return fmt.Sprintf("ChannelTransactionPurposePaidMedia%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelTransactionPurposePaidMedia) TypeID() uint32 {
	return ChannelTransactionPurposePaidMediaTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelTransactionPurposePaidMedia) TypeName() string {
	return "channelTransactionPurposePaidMedia"
}

// TypeInfo returns info about TL type.
func (c *ChannelTransactionPurposePaidMedia) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channelTransactionPurposePaidMedia",
		ID:   ChannelTransactionPurposePaidMediaTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "Media",
			SchemaName: "media",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChannelTransactionPurposePaidMedia) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposePaidMedia#b00b2258 as nil")
	}
	b.PutID(ChannelTransactionPurposePaidMediaTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChannelTransactionPurposePaidMedia) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposePaidMedia#b00b2258 as nil")
	}
	b.PutInt53(c.MessageID)
	b.PutInt(len(c.Media))
	for idx, v := range c.Media {
		if v == nil {
			return fmt.Errorf("unable to encode channelTransactionPurposePaidMedia#b00b2258: field media element with index %d is nil", idx)
		}
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare channelTransactionPurposePaidMedia#b00b2258: field media element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelTransactionPurposePaidMedia) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposePaidMedia#b00b2258 to nil")
	}
	if err := b.ConsumeID(ChannelTransactionPurposePaidMediaTypeID); err != nil {
		return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChannelTransactionPurposePaidMedia) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposePaidMedia#b00b2258 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: field message_id: %w", err)
		}
		c.MessageID = value
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: field media: %w", err)
		}

		if headerLen > 0 {
			c.Media = make([]PaidMediaClass, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodePaidMedia(b)
			if err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: field media: %w", err)
			}
			c.Media = append(c.Media, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChannelTransactionPurposePaidMedia) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposePaidMedia#b00b2258 as nil")
	}
	b.ObjStart()
	b.PutID("channelTransactionPurposePaidMedia")
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(c.MessageID)
	b.Comma()
	b.FieldStart("media")
	b.ArrStart()
	for idx, v := range c.Media {
		if v == nil {
			return fmt.Errorf("unable to encode channelTransactionPurposePaidMedia#b00b2258: field media element with index %d is nil", idx)
		}
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode channelTransactionPurposePaidMedia#b00b2258: field media element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChannelTransactionPurposePaidMedia) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposePaidMedia#b00b2258 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("channelTransactionPurposePaidMedia"); err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: %w", err)
			}
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: field message_id: %w", err)
			}
			c.MessageID = value
		case "media":
			if err := b.Arr(func(b tdjson.Decoder) error {
				value, err := DecodeTDLibJSONPaidMedia(b)
				if err != nil {
					return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: field media: %w", err)
				}
				c.Media = append(c.Media, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposePaidMedia#b00b2258: field media: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetMessageID returns value of MessageID field.
func (c *ChannelTransactionPurposePaidMedia) GetMessageID() (value int64) {
	if c == nil {
		return
	}
	return c.MessageID
}

// GetMedia returns value of Media field.
func (c *ChannelTransactionPurposePaidMedia) GetMedia() (value []PaidMediaClass) {
	if c == nil {
		return
	}
	return c.Media
}

// ChannelTransactionPurposeJoin represents TL type `channelTransactionPurposeJoin#ed83dd90`.
type ChannelTransactionPurposeJoin struct {
	// The number of seconds between consecutive Telegram Star debiting
	Period int32
}

// ChannelTransactionPurposeJoinTypeID is TL type id of ChannelTransactionPurposeJoin.
const ChannelTransactionPurposeJoinTypeID = 0xed83dd90

// construct implements constructor of ChannelTransactionPurposeClass.
func (c ChannelTransactionPurposeJoin) construct() ChannelTransactionPurposeClass { return &c }

// Ensuring interfaces in compile-time for ChannelTransactionPurposeJoin.
var (
	_ bin.Encoder     = &ChannelTransactionPurposeJoin{}
	_ bin.Decoder     = &ChannelTransactionPurposeJoin{}
	_ bin.BareEncoder = &ChannelTransactionPurposeJoin{}
	_ bin.BareDecoder = &ChannelTransactionPurposeJoin{}

	_ ChannelTransactionPurposeClass = &ChannelTransactionPurposeJoin{}
)

func (c *ChannelTransactionPurposeJoin) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Period == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelTransactionPurposeJoin) String() string {
	if c == nil {
		return "ChannelTransactionPurposeJoin(nil)"
	}
	type Alias ChannelTransactionPurposeJoin
	return fmt.Sprintf("ChannelTransactionPurposeJoin%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelTransactionPurposeJoin) TypeID() uint32 {
	return ChannelTransactionPurposeJoinTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelTransactionPurposeJoin) TypeName() string {
	return "channelTransactionPurposeJoin"
}

// TypeInfo returns info about TL type.
func (c *ChannelTransactionPurposeJoin) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channelTransactionPurposeJoin",
		ID:   ChannelTransactionPurposeJoinTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Period",
			SchemaName: "period",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChannelTransactionPurposeJoin) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposeJoin#ed83dd90 as nil")
	}
	b.PutID(ChannelTransactionPurposeJoinTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChannelTransactionPurposeJoin) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposeJoin#ed83dd90 as nil")
	}
	b.PutInt32(c.Period)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelTransactionPurposeJoin) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposeJoin#ed83dd90 to nil")
	}
	if err := b.ConsumeID(ChannelTransactionPurposeJoinTypeID); err != nil {
		return fmt.Errorf("unable to decode channelTransactionPurposeJoin#ed83dd90: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChannelTransactionPurposeJoin) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposeJoin#ed83dd90 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode channelTransactionPurposeJoin#ed83dd90: field period: %w", err)
		}
		c.Period = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChannelTransactionPurposeJoin) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposeJoin#ed83dd90 as nil")
	}
	b.ObjStart()
	b.PutID("channelTransactionPurposeJoin")
	b.Comma()
	b.FieldStart("period")
	b.PutInt32(c.Period)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChannelTransactionPurposeJoin) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposeJoin#ed83dd90 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("channelTransactionPurposeJoin"); err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposeJoin#ed83dd90: %w", err)
			}
		case "period":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposeJoin#ed83dd90: field period: %w", err)
			}
			c.Period = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetPeriod returns value of Period field.
func (c *ChannelTransactionPurposeJoin) GetPeriod() (value int32) {
	if c == nil {
		return
	}
	return c.Period
}

// ChannelTransactionPurposeReaction represents TL type `channelTransactionPurposeReaction#2ca05bee`.
type ChannelTransactionPurposeReaction struct {
	// Identifier of the reacted message; can be an identifier of a deleted message
	MessageID int64
}

// ChannelTransactionPurposeReactionTypeID is TL type id of ChannelTransactionPurposeReaction.
const ChannelTransactionPurposeReactionTypeID = 0x2ca05bee

// construct implements constructor of ChannelTransactionPurposeClass.
func (c ChannelTransactionPurposeReaction) construct() ChannelTransactionPurposeClass { return &c }

// Ensuring interfaces in compile-time for ChannelTransactionPurposeReaction.
var (
	_ bin.Encoder     = &ChannelTransactionPurposeReaction{}
	_ bin.Decoder     = &ChannelTransactionPurposeReaction{}
	_ bin.BareEncoder = &ChannelTransactionPurposeReaction{}
	_ bin.BareDecoder = &ChannelTransactionPurposeReaction{}

	_ ChannelTransactionPurposeClass = &ChannelTransactionPurposeReaction{}
)

func (c *ChannelTransactionPurposeReaction) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.MessageID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChannelTransactionPurposeReaction) String() string {
	if c == nil {
		return "ChannelTransactionPurposeReaction(nil)"
	}
	type Alias ChannelTransactionPurposeReaction
	return fmt.Sprintf("ChannelTransactionPurposeReaction%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelTransactionPurposeReaction) TypeID() uint32 {
	return ChannelTransactionPurposeReactionTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelTransactionPurposeReaction) TypeName() string {
	return "channelTransactionPurposeReaction"
}

// TypeInfo returns info about TL type.
func (c *ChannelTransactionPurposeReaction) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channelTransactionPurposeReaction",
		ID:   ChannelTransactionPurposeReactionTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChannelTransactionPurposeReaction) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposeReaction#2ca05bee as nil")
	}
	b.PutID(ChannelTransactionPurposeReactionTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChannelTransactionPurposeReaction) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposeReaction#2ca05bee as nil")
	}
	b.PutInt53(c.MessageID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChannelTransactionPurposeReaction) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposeReaction#2ca05bee to nil")
	}
	if err := b.ConsumeID(ChannelTransactionPurposeReactionTypeID); err != nil {
		return fmt.Errorf("unable to decode channelTransactionPurposeReaction#2ca05bee: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChannelTransactionPurposeReaction) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposeReaction#2ca05bee to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode channelTransactionPurposeReaction#2ca05bee: field message_id: %w", err)
		}
		c.MessageID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChannelTransactionPurposeReaction) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode channelTransactionPurposeReaction#2ca05bee as nil")
	}
	b.ObjStart()
	b.PutID("channelTransactionPurposeReaction")
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(c.MessageID)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChannelTransactionPurposeReaction) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode channelTransactionPurposeReaction#2ca05bee to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("channelTransactionPurposeReaction"); err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposeReaction#2ca05bee: %w", err)
			}
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode channelTransactionPurposeReaction#2ca05bee: field message_id: %w", err)
			}
			c.MessageID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetMessageID returns value of MessageID field.
func (c *ChannelTransactionPurposeReaction) GetMessageID() (value int64) {
	if c == nil {
		return
	}
	return c.MessageID
}

// ChannelTransactionPurposeClassName is schema name of ChannelTransactionPurposeClass.
const ChannelTransactionPurposeClassName = "ChannelTransactionPurpose"

// ChannelTransactionPurposeClass represents ChannelTransactionPurpose generic type.
//
// Example:
//
//	g, err := tdapi.DecodeChannelTransactionPurpose(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.ChannelTransactionPurposePaidMedia: // channelTransactionPurposePaidMedia#b00b2258
//	case *tdapi.ChannelTransactionPurposeJoin: // channelTransactionPurposeJoin#ed83dd90
//	case *tdapi.ChannelTransactionPurposeReaction: // channelTransactionPurposeReaction#2ca05bee
//	default: panic(v)
//	}
type ChannelTransactionPurposeClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() ChannelTransactionPurposeClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeChannelTransactionPurpose implements binary de-serialization for ChannelTransactionPurposeClass.
func DecodeChannelTransactionPurpose(buf *bin.Buffer) (ChannelTransactionPurposeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChannelTransactionPurposePaidMediaTypeID:
		// Decoding channelTransactionPurposePaidMedia#b00b2258.
		v := ChannelTransactionPurposePaidMedia{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case ChannelTransactionPurposeJoinTypeID:
		// Decoding channelTransactionPurposeJoin#ed83dd90.
		v := ChannelTransactionPurposeJoin{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case ChannelTransactionPurposeReactionTypeID:
		// Decoding channelTransactionPurposeReaction#2ca05bee.
		v := ChannelTransactionPurposeReaction{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONChannelTransactionPurpose implements binary de-serialization for ChannelTransactionPurposeClass.
func DecodeTDLibJSONChannelTransactionPurpose(buf tdjson.Decoder) (ChannelTransactionPurposeClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "channelTransactionPurposePaidMedia":
		// Decoding channelTransactionPurposePaidMedia#b00b2258.
		v := ChannelTransactionPurposePaidMedia{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case "channelTransactionPurposeJoin":
		// Decoding channelTransactionPurposeJoin#ed83dd90.
		v := ChannelTransactionPurposeJoin{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case "channelTransactionPurposeReaction":
		// Decoding channelTransactionPurposeReaction#2ca05bee.
		v := ChannelTransactionPurposeReaction{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChannelTransactionPurposeClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// ChannelTransactionPurpose boxes the ChannelTransactionPurposeClass providing a helper.
type ChannelTransactionPurposeBox struct {
	ChannelTransactionPurpose ChannelTransactionPurposeClass
}

// Decode implements bin.Decoder for ChannelTransactionPurposeBox.
func (b *ChannelTransactionPurposeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelTransactionPurposeBox to nil")
	}
	v, err := DecodeChannelTransactionPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelTransactionPurpose = v
	return nil
}

// Encode implements bin.Encode for ChannelTransactionPurposeBox.
func (b *ChannelTransactionPurposeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChannelTransactionPurpose == nil {
		return fmt.Errorf("unable to encode ChannelTransactionPurposeClass as nil")
	}
	return b.ChannelTransactionPurpose.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for ChannelTransactionPurposeBox.
func (b *ChannelTransactionPurposeBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChannelTransactionPurposeBox to nil")
	}
	v, err := DecodeTDLibJSONChannelTransactionPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChannelTransactionPurpose = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for ChannelTransactionPurposeBox.
func (b *ChannelTransactionPurposeBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.ChannelTransactionPurpose == nil {
		return fmt.Errorf("unable to encode ChannelTransactionPurposeClass as nil")
	}
	return b.ChannelTransactionPurpose.EncodeTDLibJSON(buf)
}
