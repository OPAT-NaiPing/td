// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AddPaidMessageReactionRequest represents TL type `addPaidMessageReaction#542fae53`.
type AddPaidMessageReactionRequest struct {
	// Identifier of the chat to which the message belongs
	ChatID int64
	// Identifier of the message
	MessageID int64
	// Number of Telegram Stars to be used for the reaction;
	// 1-getOption("paid_reaction_star_count_max")
	StarCount int64
	// Pass true to make paid reaction of the user on the message anonymous; pass false to
	// make the user's profile visible among top reactors
	IsAnonymous bool
}

// AddPaidMessageReactionRequestTypeID is TL type id of AddPaidMessageReactionRequest.
const AddPaidMessageReactionRequestTypeID = 0x542fae53

// Ensuring interfaces in compile-time for AddPaidMessageReactionRequest.
var (
	_ bin.Encoder     = &AddPaidMessageReactionRequest{}
	_ bin.Decoder     = &AddPaidMessageReactionRequest{}
	_ bin.BareEncoder = &AddPaidMessageReactionRequest{}
	_ bin.BareDecoder = &AddPaidMessageReactionRequest{}
)

func (a *AddPaidMessageReactionRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.ChatID == 0) {
		return false
	}
	if !(a.MessageID == 0) {
		return false
	}
	if !(a.StarCount == 0) {
		return false
	}
	if !(a.IsAnonymous == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AddPaidMessageReactionRequest) String() string {
	if a == nil {
		return "AddPaidMessageReactionRequest(nil)"
	}
	type Alias AddPaidMessageReactionRequest
	return fmt.Sprintf("AddPaidMessageReactionRequest%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AddPaidMessageReactionRequest) TypeID() uint32 {
	return AddPaidMessageReactionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*AddPaidMessageReactionRequest) TypeName() string {
	return "addPaidMessageReaction"
}

// TypeInfo returns info about TL type.
func (a *AddPaidMessageReactionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "addPaidMessageReaction",
		ID:   AddPaidMessageReactionRequestTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "StarCount",
			SchemaName: "star_count",
		},
		{
			Name:       "IsAnonymous",
			SchemaName: "is_anonymous",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AddPaidMessageReactionRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addPaidMessageReaction#542fae53 as nil")
	}
	b.PutID(AddPaidMessageReactionRequestTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AddPaidMessageReactionRequest) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addPaidMessageReaction#542fae53 as nil")
	}
	b.PutInt53(a.ChatID)
	b.PutInt53(a.MessageID)
	b.PutInt53(a.StarCount)
	b.PutBool(a.IsAnonymous)
	return nil
}

// Decode implements bin.Decoder.
func (a *AddPaidMessageReactionRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addPaidMessageReaction#542fae53 to nil")
	}
	if err := b.ConsumeID(AddPaidMessageReactionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AddPaidMessageReactionRequest) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addPaidMessageReaction#542fae53 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field chat_id: %w", err)
		}
		a.ChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field message_id: %w", err)
		}
		a.MessageID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field star_count: %w", err)
		}
		a.StarCount = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field is_anonymous: %w", err)
		}
		a.IsAnonymous = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AddPaidMessageReactionRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode addPaidMessageReaction#542fae53 as nil")
	}
	b.ObjStart()
	b.PutID("addPaidMessageReaction")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(a.ChatID)
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(a.MessageID)
	b.Comma()
	b.FieldStart("star_count")
	b.PutInt53(a.StarCount)
	b.Comma()
	b.FieldStart("is_anonymous")
	b.PutBool(a.IsAnonymous)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AddPaidMessageReactionRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode addPaidMessageReaction#542fae53 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("addPaidMessageReaction"); err != nil {
				return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field chat_id: %w", err)
			}
			a.ChatID = value
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field message_id: %w", err)
			}
			a.MessageID = value
		case "star_count":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field star_count: %w", err)
			}
			a.StarCount = value
		case "is_anonymous":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode addPaidMessageReaction#542fae53: field is_anonymous: %w", err)
			}
			a.IsAnonymous = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (a *AddPaidMessageReactionRequest) GetChatID() (value int64) {
	if a == nil {
		return
	}
	return a.ChatID
}

// GetMessageID returns value of MessageID field.
func (a *AddPaidMessageReactionRequest) GetMessageID() (value int64) {
	if a == nil {
		return
	}
	return a.MessageID
}

// GetStarCount returns value of StarCount field.
func (a *AddPaidMessageReactionRequest) GetStarCount() (value int64) {
	if a == nil {
		return
	}
	return a.StarCount
}

// GetIsAnonymous returns value of IsAnonymous field.
func (a *AddPaidMessageReactionRequest) GetIsAnonymous() (value bool) {
	if a == nil {
		return
	}
	return a.IsAnonymous
}

// AddPaidMessageReaction invokes method addPaidMessageReaction#542fae53 returning error if any.
func (c *Client) AddPaidMessageReaction(ctx context.Context, request *AddPaidMessageReactionRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
