// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// UserTransactionPurposeGiftedStars represents TL type `userTransactionPurposeGiftedStars#1fb3401`.
type UserTransactionPurposeGiftedStars struct {
	// A sticker to be shown in the transaction information; may be null if unknown
	Sticker Sticker
}

// UserTransactionPurposeGiftedStarsTypeID is TL type id of UserTransactionPurposeGiftedStars.
const UserTransactionPurposeGiftedStarsTypeID = 0x1fb3401

// construct implements constructor of UserTransactionPurposeClass.
func (u UserTransactionPurposeGiftedStars) construct() UserTransactionPurposeClass { return &u }

// Ensuring interfaces in compile-time for UserTransactionPurposeGiftedStars.
var (
	_ bin.Encoder     = &UserTransactionPurposeGiftedStars{}
	_ bin.Decoder     = &UserTransactionPurposeGiftedStars{}
	_ bin.BareEncoder = &UserTransactionPurposeGiftedStars{}
	_ bin.BareDecoder = &UserTransactionPurposeGiftedStars{}

	_ UserTransactionPurposeClass = &UserTransactionPurposeGiftedStars{}
)

func (u *UserTransactionPurposeGiftedStars) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Sticker.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *UserTransactionPurposeGiftedStars) String() string {
	if u == nil {
		return "UserTransactionPurposeGiftedStars(nil)"
	}
	type Alias UserTransactionPurposeGiftedStars
	return fmt.Sprintf("UserTransactionPurposeGiftedStars%+v", Alias(*u))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UserTransactionPurposeGiftedStars) TypeID() uint32 {
	return UserTransactionPurposeGiftedStarsTypeID
}

// TypeName returns name of type in TL schema.
func (*UserTransactionPurposeGiftedStars) TypeName() string {
	return "userTransactionPurposeGiftedStars"
}

// TypeInfo returns info about TL type.
func (u *UserTransactionPurposeGiftedStars) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "userTransactionPurposeGiftedStars",
		ID:   UserTransactionPurposeGiftedStarsTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Sticker",
			SchemaName: "sticker",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (u *UserTransactionPurposeGiftedStars) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftedStars#1fb3401 as nil")
	}
	b.PutID(UserTransactionPurposeGiftedStarsTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *UserTransactionPurposeGiftedStars) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftedStars#1fb3401 as nil")
	}
	if err := u.Sticker.Encode(b); err != nil {
		return fmt.Errorf("unable to encode userTransactionPurposeGiftedStars#1fb3401: field sticker: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UserTransactionPurposeGiftedStars) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftedStars#1fb3401 to nil")
	}
	if err := b.ConsumeID(UserTransactionPurposeGiftedStarsTypeID); err != nil {
		return fmt.Errorf("unable to decode userTransactionPurposeGiftedStars#1fb3401: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *UserTransactionPurposeGiftedStars) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftedStars#1fb3401 to nil")
	}
	{
		if err := u.Sticker.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userTransactionPurposeGiftedStars#1fb3401: field sticker: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (u *UserTransactionPurposeGiftedStars) EncodeTDLibJSON(b tdjson.Encoder) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftedStars#1fb3401 as nil")
	}
	b.ObjStart()
	b.PutID("userTransactionPurposeGiftedStars")
	b.Comma()
	b.FieldStart("sticker")
	if err := u.Sticker.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode userTransactionPurposeGiftedStars#1fb3401: field sticker: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (u *UserTransactionPurposeGiftedStars) DecodeTDLibJSON(b tdjson.Decoder) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftedStars#1fb3401 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("userTransactionPurposeGiftedStars"); err != nil {
				return fmt.Errorf("unable to decode userTransactionPurposeGiftedStars#1fb3401: %w", err)
			}
		case "sticker":
			if err := u.Sticker.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode userTransactionPurposeGiftedStars#1fb3401: field sticker: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetSticker returns value of Sticker field.
func (u *UserTransactionPurposeGiftedStars) GetSticker() (value Sticker) {
	if u == nil {
		return
	}
	return u.Sticker
}

// UserTransactionPurposeGiftSell represents TL type `userTransactionPurposeGiftSell#195fcd8e`.
type UserTransactionPurposeGiftSell struct {
	// The gift
	Gift Gift
}

// UserTransactionPurposeGiftSellTypeID is TL type id of UserTransactionPurposeGiftSell.
const UserTransactionPurposeGiftSellTypeID = 0x195fcd8e

// construct implements constructor of UserTransactionPurposeClass.
func (u UserTransactionPurposeGiftSell) construct() UserTransactionPurposeClass { return &u }

// Ensuring interfaces in compile-time for UserTransactionPurposeGiftSell.
var (
	_ bin.Encoder     = &UserTransactionPurposeGiftSell{}
	_ bin.Decoder     = &UserTransactionPurposeGiftSell{}
	_ bin.BareEncoder = &UserTransactionPurposeGiftSell{}
	_ bin.BareDecoder = &UserTransactionPurposeGiftSell{}

	_ UserTransactionPurposeClass = &UserTransactionPurposeGiftSell{}
)

func (u *UserTransactionPurposeGiftSell) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Gift.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *UserTransactionPurposeGiftSell) String() string {
	if u == nil {
		return "UserTransactionPurposeGiftSell(nil)"
	}
	type Alias UserTransactionPurposeGiftSell
	return fmt.Sprintf("UserTransactionPurposeGiftSell%+v", Alias(*u))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UserTransactionPurposeGiftSell) TypeID() uint32 {
	return UserTransactionPurposeGiftSellTypeID
}

// TypeName returns name of type in TL schema.
func (*UserTransactionPurposeGiftSell) TypeName() string {
	return "userTransactionPurposeGiftSell"
}

// TypeInfo returns info about TL type.
func (u *UserTransactionPurposeGiftSell) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "userTransactionPurposeGiftSell",
		ID:   UserTransactionPurposeGiftSellTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Gift",
			SchemaName: "gift",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (u *UserTransactionPurposeGiftSell) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftSell#195fcd8e as nil")
	}
	b.PutID(UserTransactionPurposeGiftSellTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *UserTransactionPurposeGiftSell) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftSell#195fcd8e as nil")
	}
	if err := u.Gift.Encode(b); err != nil {
		return fmt.Errorf("unable to encode userTransactionPurposeGiftSell#195fcd8e: field gift: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UserTransactionPurposeGiftSell) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftSell#195fcd8e to nil")
	}
	if err := b.ConsumeID(UserTransactionPurposeGiftSellTypeID); err != nil {
		return fmt.Errorf("unable to decode userTransactionPurposeGiftSell#195fcd8e: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *UserTransactionPurposeGiftSell) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftSell#195fcd8e to nil")
	}
	{
		if err := u.Gift.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userTransactionPurposeGiftSell#195fcd8e: field gift: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (u *UserTransactionPurposeGiftSell) EncodeTDLibJSON(b tdjson.Encoder) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftSell#195fcd8e as nil")
	}
	b.ObjStart()
	b.PutID("userTransactionPurposeGiftSell")
	b.Comma()
	b.FieldStart("gift")
	if err := u.Gift.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode userTransactionPurposeGiftSell#195fcd8e: field gift: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (u *UserTransactionPurposeGiftSell) DecodeTDLibJSON(b tdjson.Decoder) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftSell#195fcd8e to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("userTransactionPurposeGiftSell"); err != nil {
				return fmt.Errorf("unable to decode userTransactionPurposeGiftSell#195fcd8e: %w", err)
			}
		case "gift":
			if err := u.Gift.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode userTransactionPurposeGiftSell#195fcd8e: field gift: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetGift returns value of Gift field.
func (u *UserTransactionPurposeGiftSell) GetGift() (value Gift) {
	if u == nil {
		return
	}
	return u.Gift
}

// UserTransactionPurposeGiftSend represents TL type `userTransactionPurposeGiftSend#b36e54df`.
type UserTransactionPurposeGiftSend struct {
	// The gift
	Gift Gift
}

// UserTransactionPurposeGiftSendTypeID is TL type id of UserTransactionPurposeGiftSend.
const UserTransactionPurposeGiftSendTypeID = 0xb36e54df

// construct implements constructor of UserTransactionPurposeClass.
func (u UserTransactionPurposeGiftSend) construct() UserTransactionPurposeClass { return &u }

// Ensuring interfaces in compile-time for UserTransactionPurposeGiftSend.
var (
	_ bin.Encoder     = &UserTransactionPurposeGiftSend{}
	_ bin.Decoder     = &UserTransactionPurposeGiftSend{}
	_ bin.BareEncoder = &UserTransactionPurposeGiftSend{}
	_ bin.BareDecoder = &UserTransactionPurposeGiftSend{}

	_ UserTransactionPurposeClass = &UserTransactionPurposeGiftSend{}
)

func (u *UserTransactionPurposeGiftSend) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Gift.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *UserTransactionPurposeGiftSend) String() string {
	if u == nil {
		return "UserTransactionPurposeGiftSend(nil)"
	}
	type Alias UserTransactionPurposeGiftSend
	return fmt.Sprintf("UserTransactionPurposeGiftSend%+v", Alias(*u))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UserTransactionPurposeGiftSend) TypeID() uint32 {
	return UserTransactionPurposeGiftSendTypeID
}

// TypeName returns name of type in TL schema.
func (*UserTransactionPurposeGiftSend) TypeName() string {
	return "userTransactionPurposeGiftSend"
}

// TypeInfo returns info about TL type.
func (u *UserTransactionPurposeGiftSend) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "userTransactionPurposeGiftSend",
		ID:   UserTransactionPurposeGiftSendTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Gift",
			SchemaName: "gift",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (u *UserTransactionPurposeGiftSend) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftSend#b36e54df as nil")
	}
	b.PutID(UserTransactionPurposeGiftSendTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *UserTransactionPurposeGiftSend) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftSend#b36e54df as nil")
	}
	if err := u.Gift.Encode(b); err != nil {
		return fmt.Errorf("unable to encode userTransactionPurposeGiftSend#b36e54df: field gift: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UserTransactionPurposeGiftSend) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftSend#b36e54df to nil")
	}
	if err := b.ConsumeID(UserTransactionPurposeGiftSendTypeID); err != nil {
		return fmt.Errorf("unable to decode userTransactionPurposeGiftSend#b36e54df: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *UserTransactionPurposeGiftSend) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftSend#b36e54df to nil")
	}
	{
		if err := u.Gift.Decode(b); err != nil {
			return fmt.Errorf("unable to decode userTransactionPurposeGiftSend#b36e54df: field gift: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (u *UserTransactionPurposeGiftSend) EncodeTDLibJSON(b tdjson.Encoder) error {
	if u == nil {
		return fmt.Errorf("can't encode userTransactionPurposeGiftSend#b36e54df as nil")
	}
	b.ObjStart()
	b.PutID("userTransactionPurposeGiftSend")
	b.Comma()
	b.FieldStart("gift")
	if err := u.Gift.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode userTransactionPurposeGiftSend#b36e54df: field gift: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (u *UserTransactionPurposeGiftSend) DecodeTDLibJSON(b tdjson.Decoder) error {
	if u == nil {
		return fmt.Errorf("can't decode userTransactionPurposeGiftSend#b36e54df to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("userTransactionPurposeGiftSend"); err != nil {
				return fmt.Errorf("unable to decode userTransactionPurposeGiftSend#b36e54df: %w", err)
			}
		case "gift":
			if err := u.Gift.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode userTransactionPurposeGiftSend#b36e54df: field gift: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetGift returns value of Gift field.
func (u *UserTransactionPurposeGiftSend) GetGift() (value Gift) {
	if u == nil {
		return
	}
	return u.Gift
}

// UserTransactionPurposeClassName is schema name of UserTransactionPurposeClass.
const UserTransactionPurposeClassName = "UserTransactionPurpose"

// UserTransactionPurposeClass represents UserTransactionPurpose generic type.
//
// Example:
//
//	g, err := tdapi.DecodeUserTransactionPurpose(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.UserTransactionPurposeGiftedStars: // userTransactionPurposeGiftedStars#1fb3401
//	case *tdapi.UserTransactionPurposeGiftSell: // userTransactionPurposeGiftSell#195fcd8e
//	case *tdapi.UserTransactionPurposeGiftSend: // userTransactionPurposeGiftSend#b36e54df
//	default: panic(v)
//	}
type UserTransactionPurposeClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() UserTransactionPurposeClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeUserTransactionPurpose implements binary de-serialization for UserTransactionPurposeClass.
func DecodeUserTransactionPurpose(buf *bin.Buffer) (UserTransactionPurposeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case UserTransactionPurposeGiftedStarsTypeID:
		// Decoding userTransactionPurposeGiftedStars#1fb3401.
		v := UserTransactionPurposeGiftedStars{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case UserTransactionPurposeGiftSellTypeID:
		// Decoding userTransactionPurposeGiftSell#195fcd8e.
		v := UserTransactionPurposeGiftSell{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case UserTransactionPurposeGiftSendTypeID:
		// Decoding userTransactionPurposeGiftSend#b36e54df.
		v := UserTransactionPurposeGiftSend{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONUserTransactionPurpose implements binary de-serialization for UserTransactionPurposeClass.
func DecodeTDLibJSONUserTransactionPurpose(buf tdjson.Decoder) (UserTransactionPurposeClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "userTransactionPurposeGiftedStars":
		// Decoding userTransactionPurposeGiftedStars#1fb3401.
		v := UserTransactionPurposeGiftedStars{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case "userTransactionPurposeGiftSell":
		// Decoding userTransactionPurposeGiftSell#195fcd8e.
		v := UserTransactionPurposeGiftSell{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", err)
		}
		return &v, nil
	case "userTransactionPurposeGiftSend":
		// Decoding userTransactionPurposeGiftSend#b36e54df.
		v := UserTransactionPurposeGiftSend{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode UserTransactionPurposeClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// UserTransactionPurpose boxes the UserTransactionPurposeClass providing a helper.
type UserTransactionPurposeBox struct {
	UserTransactionPurpose UserTransactionPurposeClass
}

// Decode implements bin.Decoder for UserTransactionPurposeBox.
func (b *UserTransactionPurposeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode UserTransactionPurposeBox to nil")
	}
	v, err := DecodeUserTransactionPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.UserTransactionPurpose = v
	return nil
}

// Encode implements bin.Encode for UserTransactionPurposeBox.
func (b *UserTransactionPurposeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.UserTransactionPurpose == nil {
		return fmt.Errorf("unable to encode UserTransactionPurposeClass as nil")
	}
	return b.UserTransactionPurpose.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for UserTransactionPurposeBox.
func (b *UserTransactionPurposeBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode UserTransactionPurposeBox to nil")
	}
	v, err := DecodeTDLibJSONUserTransactionPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.UserTransactionPurpose = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for UserTransactionPurposeBox.
func (b *UserTransactionPurposeBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.UserTransactionPurpose == nil {
		return fmt.Errorf("unable to encode UserTransactionPurposeClass as nil")
	}
	return b.UserTransactionPurpose.EncodeTDLibJSON(buf)
}
