// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AlternativeVideo represents TL type `alternativeVideo#bfda3bb3`.
type AlternativeVideo struct {
	// Video width
	Width int32
	// Video height
	Height int32
	// Codec used for video file encoding, for example, "h264", "h265", or "av1"
	Codec string
	// HLS file describing the video
	HlsFile File
	// File containing the video
	Video File
}

// AlternativeVideoTypeID is TL type id of AlternativeVideo.
const AlternativeVideoTypeID = 0xbfda3bb3

// Ensuring interfaces in compile-time for AlternativeVideo.
var (
	_ bin.Encoder     = &AlternativeVideo{}
	_ bin.Decoder     = &AlternativeVideo{}
	_ bin.BareEncoder = &AlternativeVideo{}
	_ bin.BareDecoder = &AlternativeVideo{}
)

func (a *AlternativeVideo) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Width == 0) {
		return false
	}
	if !(a.Height == 0) {
		return false
	}
	if !(a.Codec == "") {
		return false
	}
	if !(a.HlsFile.Zero()) {
		return false
	}
	if !(a.Video.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AlternativeVideo) String() string {
	if a == nil {
		return "AlternativeVideo(nil)"
	}
	type Alias AlternativeVideo
	return fmt.Sprintf("AlternativeVideo%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AlternativeVideo) TypeID() uint32 {
	return AlternativeVideoTypeID
}

// TypeName returns name of type in TL schema.
func (*AlternativeVideo) TypeName() string {
	return "alternativeVideo"
}

// TypeInfo returns info about TL type.
func (a *AlternativeVideo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "alternativeVideo",
		ID:   AlternativeVideoTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Width",
			SchemaName: "width",
		},
		{
			Name:       "Height",
			SchemaName: "height",
		},
		{
			Name:       "Codec",
			SchemaName: "codec",
		},
		{
			Name:       "HlsFile",
			SchemaName: "hls_file",
		},
		{
			Name:       "Video",
			SchemaName: "video",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AlternativeVideo) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode alternativeVideo#bfda3bb3 as nil")
	}
	b.PutID(AlternativeVideoTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AlternativeVideo) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode alternativeVideo#bfda3bb3 as nil")
	}
	b.PutInt32(a.Width)
	b.PutInt32(a.Height)
	b.PutString(a.Codec)
	if err := a.HlsFile.Encode(b); err != nil {
		return fmt.Errorf("unable to encode alternativeVideo#bfda3bb3: field hls_file: %w", err)
	}
	if err := a.Video.Encode(b); err != nil {
		return fmt.Errorf("unable to encode alternativeVideo#bfda3bb3: field video: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (a *AlternativeVideo) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode alternativeVideo#bfda3bb3 to nil")
	}
	if err := b.ConsumeID(AlternativeVideoTypeID); err != nil {
		return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AlternativeVideo) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode alternativeVideo#bfda3bb3 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field width: %w", err)
		}
		a.Width = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field height: %w", err)
		}
		a.Height = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field codec: %w", err)
		}
		a.Codec = value
	}
	{
		if err := a.HlsFile.Decode(b); err != nil {
			return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field hls_file: %w", err)
		}
	}
	{
		if err := a.Video.Decode(b); err != nil {
			return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field video: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AlternativeVideo) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode alternativeVideo#bfda3bb3 as nil")
	}
	b.ObjStart()
	b.PutID("alternativeVideo")
	b.Comma()
	b.FieldStart("width")
	b.PutInt32(a.Width)
	b.Comma()
	b.FieldStart("height")
	b.PutInt32(a.Height)
	b.Comma()
	b.FieldStart("codec")
	b.PutString(a.Codec)
	b.Comma()
	b.FieldStart("hls_file")
	if err := a.HlsFile.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode alternativeVideo#bfda3bb3: field hls_file: %w", err)
	}
	b.Comma()
	b.FieldStart("video")
	if err := a.Video.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode alternativeVideo#bfda3bb3: field video: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AlternativeVideo) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode alternativeVideo#bfda3bb3 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("alternativeVideo"); err != nil {
				return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: %w", err)
			}
		case "width":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field width: %w", err)
			}
			a.Width = value
		case "height":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field height: %w", err)
			}
			a.Height = value
		case "codec":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field codec: %w", err)
			}
			a.Codec = value
		case "hls_file":
			if err := a.HlsFile.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field hls_file: %w", err)
			}
		case "video":
			if err := a.Video.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode alternativeVideo#bfda3bb3: field video: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetWidth returns value of Width field.
func (a *AlternativeVideo) GetWidth() (value int32) {
	if a == nil {
		return
	}
	return a.Width
}

// GetHeight returns value of Height field.
func (a *AlternativeVideo) GetHeight() (value int32) {
	if a == nil {
		return
	}
	return a.Height
}

// GetCodec returns value of Codec field.
func (a *AlternativeVideo) GetCodec() (value string) {
	if a == nil {
		return
	}
	return a.Codec
}

// GetHlsFile returns value of HlsFile field.
func (a *AlternativeVideo) GetHlsFile() (value File) {
	if a == nil {
		return
	}
	return a.HlsFile
}

// GetVideo returns value of Video field.
func (a *AlternativeVideo) GetVideo() (value File) {
	if a == nil {
		return
	}
	return a.Video
}
