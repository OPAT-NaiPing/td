// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// UpgradedGift represents TL type `upgradedGift#e5f50e98`.
type UpgradedGift struct {
	// Unique identifier of the gift
	ID int64
	// The title of the upgraded gift
	Title string
	// Unique number of the upgraded gift among gifts upgraded from the same gift
	Number int32
	// Total number of gifts that were upgraded from the same gift
	TotalUpgradedCount int32
	// The maximum number of gifts that can be upgraded from the same gift
	MaxUpgradedCount int32
	// User identifier of the user that owns the upgraded gift; 0 if none
	OwnerUserID int64
	// Model of the upgraded gift
	Model UpgradedGiftModel
	// Symbol of the upgraded gift
	Symbol UpgradedGiftSymbol
	// Backdrop of the upgraded gift
	Backdrop UpgradedGiftBackdrop
	// Information about the originally sent gift; may be null if unknown
	OriginalDetails UpgradedGiftOriginalDetails
}

// UpgradedGiftTypeID is TL type id of UpgradedGift.
const UpgradedGiftTypeID = 0xe5f50e98

// Ensuring interfaces in compile-time for UpgradedGift.
var (
	_ bin.Encoder     = &UpgradedGift{}
	_ bin.Decoder     = &UpgradedGift{}
	_ bin.BareEncoder = &UpgradedGift{}
	_ bin.BareDecoder = &UpgradedGift{}
)

func (u *UpgradedGift) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.ID == 0) {
		return false
	}
	if !(u.Title == "") {
		return false
	}
	if !(u.Number == 0) {
		return false
	}
	if !(u.TotalUpgradedCount == 0) {
		return false
	}
	if !(u.MaxUpgradedCount == 0) {
		return false
	}
	if !(u.OwnerUserID == 0) {
		return false
	}
	if !(u.Model.Zero()) {
		return false
	}
	if !(u.Symbol.Zero()) {
		return false
	}
	if !(u.Backdrop.Zero()) {
		return false
	}
	if !(u.OriginalDetails.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *UpgradedGift) String() string {
	if u == nil {
		return "UpgradedGift(nil)"
	}
	type Alias UpgradedGift
	return fmt.Sprintf("UpgradedGift%+v", Alias(*u))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*UpgradedGift) TypeID() uint32 {
	return UpgradedGiftTypeID
}

// TypeName returns name of type in TL schema.
func (*UpgradedGift) TypeName() string {
	return "upgradedGift"
}

// TypeInfo returns info about TL type.
func (u *UpgradedGift) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "upgradedGift",
		ID:   UpgradedGiftTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "Number",
			SchemaName: "number",
		},
		{
			Name:       "TotalUpgradedCount",
			SchemaName: "total_upgraded_count",
		},
		{
			Name:       "MaxUpgradedCount",
			SchemaName: "max_upgraded_count",
		},
		{
			Name:       "OwnerUserID",
			SchemaName: "owner_user_id",
		},
		{
			Name:       "Model",
			SchemaName: "model",
		},
		{
			Name:       "Symbol",
			SchemaName: "symbol",
		},
		{
			Name:       "Backdrop",
			SchemaName: "backdrop",
		},
		{
			Name:       "OriginalDetails",
			SchemaName: "original_details",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (u *UpgradedGift) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode upgradedGift#e5f50e98 as nil")
	}
	b.PutID(UpgradedGiftTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *UpgradedGift) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode upgradedGift#e5f50e98 as nil")
	}
	b.PutLong(u.ID)
	b.PutString(u.Title)
	b.PutInt32(u.Number)
	b.PutInt32(u.TotalUpgradedCount)
	b.PutInt32(u.MaxUpgradedCount)
	b.PutInt53(u.OwnerUserID)
	if err := u.Model.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field model: %w", err)
	}
	if err := u.Symbol.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field symbol: %w", err)
	}
	if err := u.Backdrop.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field backdrop: %w", err)
	}
	if err := u.OriginalDetails.Encode(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field original_details: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (u *UpgradedGift) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode upgradedGift#e5f50e98 to nil")
	}
	if err := b.ConsumeID(UpgradedGiftTypeID); err != nil {
		return fmt.Errorf("unable to decode upgradedGift#e5f50e98: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *UpgradedGift) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode upgradedGift#e5f50e98 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field id: %w", err)
		}
		u.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field title: %w", err)
		}
		u.Title = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field number: %w", err)
		}
		u.Number = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field total_upgraded_count: %w", err)
		}
		u.TotalUpgradedCount = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field max_upgraded_count: %w", err)
		}
		u.MaxUpgradedCount = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field owner_user_id: %w", err)
		}
		u.OwnerUserID = value
	}
	{
		if err := u.Model.Decode(b); err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field model: %w", err)
		}
	}
	{
		if err := u.Symbol.Decode(b); err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field symbol: %w", err)
		}
	}
	{
		if err := u.Backdrop.Decode(b); err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field backdrop: %w", err)
		}
	}
	{
		if err := u.OriginalDetails.Decode(b); err != nil {
			return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field original_details: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (u *UpgradedGift) EncodeTDLibJSON(b tdjson.Encoder) error {
	if u == nil {
		return fmt.Errorf("can't encode upgradedGift#e5f50e98 as nil")
	}
	b.ObjStart()
	b.PutID("upgradedGift")
	b.Comma()
	b.FieldStart("id")
	b.PutLong(u.ID)
	b.Comma()
	b.FieldStart("title")
	b.PutString(u.Title)
	b.Comma()
	b.FieldStart("number")
	b.PutInt32(u.Number)
	b.Comma()
	b.FieldStart("total_upgraded_count")
	b.PutInt32(u.TotalUpgradedCount)
	b.Comma()
	b.FieldStart("max_upgraded_count")
	b.PutInt32(u.MaxUpgradedCount)
	b.Comma()
	b.FieldStart("owner_user_id")
	b.PutInt53(u.OwnerUserID)
	b.Comma()
	b.FieldStart("model")
	if err := u.Model.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field model: %w", err)
	}
	b.Comma()
	b.FieldStart("symbol")
	if err := u.Symbol.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field symbol: %w", err)
	}
	b.Comma()
	b.FieldStart("backdrop")
	if err := u.Backdrop.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field backdrop: %w", err)
	}
	b.Comma()
	b.FieldStart("original_details")
	if err := u.OriginalDetails.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode upgradedGift#e5f50e98: field original_details: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (u *UpgradedGift) DecodeTDLibJSON(b tdjson.Decoder) error {
	if u == nil {
		return fmt.Errorf("can't decode upgradedGift#e5f50e98 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("upgradedGift"); err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: %w", err)
			}
		case "id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field id: %w", err)
			}
			u.ID = value
		case "title":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field title: %w", err)
			}
			u.Title = value
		case "number":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field number: %w", err)
			}
			u.Number = value
		case "total_upgraded_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field total_upgraded_count: %w", err)
			}
			u.TotalUpgradedCount = value
		case "max_upgraded_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field max_upgraded_count: %w", err)
			}
			u.MaxUpgradedCount = value
		case "owner_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field owner_user_id: %w", err)
			}
			u.OwnerUserID = value
		case "model":
			if err := u.Model.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field model: %w", err)
			}
		case "symbol":
			if err := u.Symbol.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field symbol: %w", err)
			}
		case "backdrop":
			if err := u.Backdrop.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field backdrop: %w", err)
			}
		case "original_details":
			if err := u.OriginalDetails.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode upgradedGift#e5f50e98: field original_details: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetID returns value of ID field.
func (u *UpgradedGift) GetID() (value int64) {
	if u == nil {
		return
	}
	return u.ID
}

// GetTitle returns value of Title field.
func (u *UpgradedGift) GetTitle() (value string) {
	if u == nil {
		return
	}
	return u.Title
}

// GetNumber returns value of Number field.
func (u *UpgradedGift) GetNumber() (value int32) {
	if u == nil {
		return
	}
	return u.Number
}

// GetTotalUpgradedCount returns value of TotalUpgradedCount field.
func (u *UpgradedGift) GetTotalUpgradedCount() (value int32) {
	if u == nil {
		return
	}
	return u.TotalUpgradedCount
}

// GetMaxUpgradedCount returns value of MaxUpgradedCount field.
func (u *UpgradedGift) GetMaxUpgradedCount() (value int32) {
	if u == nil {
		return
	}
	return u.MaxUpgradedCount
}

// GetOwnerUserID returns value of OwnerUserID field.
func (u *UpgradedGift) GetOwnerUserID() (value int64) {
	if u == nil {
		return
	}
	return u.OwnerUserID
}

// GetModel returns value of Model field.
func (u *UpgradedGift) GetModel() (value UpgradedGiftModel) {
	if u == nil {
		return
	}
	return u.Model
}

// GetSymbol returns value of Symbol field.
func (u *UpgradedGift) GetSymbol() (value UpgradedGiftSymbol) {
	if u == nil {
		return
	}
	return u.Symbol
}

// GetBackdrop returns value of Backdrop field.
func (u *UpgradedGift) GetBackdrop() (value UpgradedGiftBackdrop) {
	if u == nil {
		return
	}
	return u.Backdrop
}

// GetOriginalDetails returns value of OriginalDetails field.
func (u *UpgradedGift) GetOriginalDetails() (value UpgradedGiftOriginalDetails) {
	if u == nil {
		return
	}
	return u.OriginalDetails
}
