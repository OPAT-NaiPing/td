// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ConnectChatAffiliateProgramRequest represents TL type `connectChatAffiliateProgram#75b163c4`.
type ConnectChatAffiliateProgramRequest struct {
	// Identifier of the chat to which the affiliate program will be connected. Can be an
	// identifier of the Saved Messages chat, of a chat with an owned bot, or of a channel
	// chat with can_post_messages administrator right
	ChatID int64
	// Identifier of the bot, which affiliate program is connected
	BotUserID int64
}

// ConnectChatAffiliateProgramRequestTypeID is TL type id of ConnectChatAffiliateProgramRequest.
const ConnectChatAffiliateProgramRequestTypeID = 0x75b163c4

// Ensuring interfaces in compile-time for ConnectChatAffiliateProgramRequest.
var (
	_ bin.Encoder     = &ConnectChatAffiliateProgramRequest{}
	_ bin.Decoder     = &ConnectChatAffiliateProgramRequest{}
	_ bin.BareEncoder = &ConnectChatAffiliateProgramRequest{}
	_ bin.BareDecoder = &ConnectChatAffiliateProgramRequest{}
)

func (c *ConnectChatAffiliateProgramRequest) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.ChatID == 0) {
		return false
	}
	if !(c.BotUserID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ConnectChatAffiliateProgramRequest) String() string {
	if c == nil {
		return "ConnectChatAffiliateProgramRequest(nil)"
	}
	type Alias ConnectChatAffiliateProgramRequest
	return fmt.Sprintf("ConnectChatAffiliateProgramRequest%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ConnectChatAffiliateProgramRequest) TypeID() uint32 {
	return ConnectChatAffiliateProgramRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ConnectChatAffiliateProgramRequest) TypeName() string {
	return "connectChatAffiliateProgram"
}

// TypeInfo returns info about TL type.
func (c *ConnectChatAffiliateProgramRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "connectChatAffiliateProgram",
		ID:   ConnectChatAffiliateProgramRequestTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ConnectChatAffiliateProgramRequest) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode connectChatAffiliateProgram#75b163c4 as nil")
	}
	b.PutID(ConnectChatAffiliateProgramRequestTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ConnectChatAffiliateProgramRequest) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode connectChatAffiliateProgram#75b163c4 as nil")
	}
	b.PutInt53(c.ChatID)
	b.PutInt53(c.BotUserID)
	return nil
}

// Decode implements bin.Decoder.
func (c *ConnectChatAffiliateProgramRequest) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode connectChatAffiliateProgram#75b163c4 to nil")
	}
	if err := b.ConsumeID(ConnectChatAffiliateProgramRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode connectChatAffiliateProgram#75b163c4: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ConnectChatAffiliateProgramRequest) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode connectChatAffiliateProgram#75b163c4 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode connectChatAffiliateProgram#75b163c4: field chat_id: %w", err)
		}
		c.ChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode connectChatAffiliateProgram#75b163c4: field bot_user_id: %w", err)
		}
		c.BotUserID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ConnectChatAffiliateProgramRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode connectChatAffiliateProgram#75b163c4 as nil")
	}
	b.ObjStart()
	b.PutID("connectChatAffiliateProgram")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(c.ChatID)
	b.Comma()
	b.FieldStart("bot_user_id")
	b.PutInt53(c.BotUserID)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ConnectChatAffiliateProgramRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode connectChatAffiliateProgram#75b163c4 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("connectChatAffiliateProgram"); err != nil {
				return fmt.Errorf("unable to decode connectChatAffiliateProgram#75b163c4: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode connectChatAffiliateProgram#75b163c4: field chat_id: %w", err)
			}
			c.ChatID = value
		case "bot_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode connectChatAffiliateProgram#75b163c4: field bot_user_id: %w", err)
			}
			c.BotUserID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (c *ConnectChatAffiliateProgramRequest) GetChatID() (value int64) {
	if c == nil {
		return
	}
	return c.ChatID
}

// GetBotUserID returns value of BotUserID field.
func (c *ConnectChatAffiliateProgramRequest) GetBotUserID() (value int64) {
	if c == nil {
		return
	}
	return c.BotUserID
}

// ConnectChatAffiliateProgram invokes method connectChatAffiliateProgram#75b163c4 returning error if any.
func (c *Client) ConnectChatAffiliateProgram(ctx context.Context, request *ConnectChatAffiliateProgramRequest) (*ChatAffiliateProgram, error) {
	var result ChatAffiliateProgram

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
